
# Build Stage
FROM node:18 AS build-stage

# Set the working directory
WORKDIR /app

# Copy package.json and package-lock.json for dependency installation
COPY package.json package-lock.json ./

# Install the app dependencies
RUN npm install

# Copy the rest of the application files
COPY . .

# Create a production build (optional)
RUN npm run build

# Runtime Stage
FROM node:18-slim AS runtime-stage

# Set the working directory in the runtime image
WORKDIR /app

# Install only the production dependencies (no dev dependencies)
COPY --from=build-stage /app/package.json /app/package-lock.json /app/
RUN npm install --production

# Copy the necessary app files from the build stage
COPY --from=build-stage /app /app/

# Expose the necessary port (e.g., 3000 for a Node.js app)
EXPOSE 3000

# Command to run the app
CMD ["node", "app.js"]



# ==================try some other time ===========

# # ========== Build Stage ==========
# FROM node:18 AS build-stage

# # Set working directory
# WORKDIR /app

# # Copy package definition files
# COPY package.json ./

# # Create an empty package-lock.json if not present
# RUN [ -f package-lock.json ] || echo '{}' > package-lock.json

# # Install dependencies
# RUN npm install

# # Copy the rest of the application
# COPY . .

# # Skip if no build script is needed
# # Uncomment below only if you have a build step (e.g., React, TS, Babel)
# # RUN npm run build


# # ========== Runtime Stage ==========
# FROM node:18-slim AS runtime-stage

# # Set working directory
# WORKDIR /app

# # Copy only production dependencies
# COPY --from=build-stage /app/package.json /app/package-lock.json ./
# RUN npm install --production

# # Copy built app and all files
# COPY --from=build-stage /app /app

# # Expose app port
# EXPOSE 3000

# # Start the server (change `index.js` to your entry file if needed)
# CMD ["node", "index.js"]

